services:
  api_gateway:
    container_name: api_gateway
    build: ./backend/api_gateway
    ports:
      - "8000:8000"
    depends_on:
      - user_service
      - article_service
      - community_service
      - team_service
      - communication_service
    volumes:
      - ./backend/api_gateway:/app


  user_service:
    container_name: user_service
    build: ./backend/user_service
    ports:
      - "8001:8001"
    depends_on:
      - user_db
      - user_redis
      - kafka
    volumes:
      - ./backend/user_service:/app

  article_service:
    container_name: article_service
    build: ./backend/article_service
    ports:
      - "8002:8002"
    depends_on:
      - article_db
      - kafka
      - elasticsearch
    volumes:
      - ./backend/article_service:/app

  community_service:
    container_name: community_service
    build: ./backend/community_service
    ports:
      - "8003:8003"
    depends_on:
      - community_db
      - kafka
    volumes:
      - ./backend/community_service:/app

  team_service:
    container_name: team_service
    build: ./backend/team_service
    ports:
      - "8004:8004"
    depends_on:
      - team_db
      - kafka
    volumes:
      - ./backend/team_service:/app

  communication_service:
    container_name: communication_service
    build: ./backend/communication_service
    ports:
      - "8005:8005"
    depends_on:
      - communication_db
      - communication_redis
      - kafka
    volumes:
      - ./backend/communication_service:/app

  payment_service:
    container_name: payment_service
    build: ./backend/payment_service
    ports:
      - "8006:8006"
    depends_on:
      - payment_db
      - kafka
    volumes:
      - ./backend/payment_service:/app

  search_service:
    container_name: search_service
    build: ./backend/search_service
    ports:
      - "8007:8007"
    depends_on:
      - elasticsearch
    volumes:
      - ./backend/search_service:/app

  user_db:
    container_name: user_db
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: fauzu
      POSTGRES_PASSWORD: password
    volumes:
      - user_db_data:/var/lib/postgresql/data


  article_db:
    container_name: article_db
    image: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: article_db
      POSTGRES_USER: fauzu
      POSTGRES_PASSWORD: password
    volumes:
      - article_db_data:/var/lib/postgresql/data

  community_db:
    container_name: community_db
    image: postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: community_db
      POSTGRES_USER: fauzu
      POSTGRES_PASSWORD: password
    volumes:
      - community_db_data:/var/lib/postgresql/data

  team_db:
    container_name: team_db
    image: postgres
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: team_db
      POSTGRES_USER: fauzu
      POSTGRES_PASSWORD: password
    volumes:
      - team_db_data:/var/lib/postgresql/data

  communication_db:
    container_name: communication_db
    image: postgres
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: communication_db
      POSTGRES_USER: fauzu
      POSTGRES_PASSWORD: password
    volumes:
      - communication_db_data:/var/lib/postgresql/data

  payment_db:
    container_name: payment_db
    image: postgres
    ports:
      - "5437:5432"
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: fauzu
      POSTGRES_PASSWORD: password
    volumes:
      - payment_db_data:/var/lib/postgresql/data
  
  user_redis:
    container_name: user_redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - user_redis_data:/data

  communication_redis:
    container_name: communication_redis
    image: "redis:alpine"
    ports:
      - "6380:6379"
    volumes:
      - communication_redis_data:/data

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_LOG4J_PROP=log4j.rootLogger=OFF, stdout

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LOG4J_OPTS=-Dlog4j.rootLogger=OFF
    depends_on:
      - zookeeper 
    restart: on-failure

  celery-worker:
    container_name: celery_worker
    build: ./backend/communication_service 
    command: celery -A communication_service worker -l info
    depends_on:
      - communication_db
      - communication_redis
      - kafka
    volumes:
      - ./backend/communication_service:/app
    environment:
      - CELERY_BROKER_URL=kafka://host.docker.internal:9092
      - CELERY_RESULT_BACKEND=django-db
      - CELERY_CACHE_BACKEND=django-cache
      - CELERY_ACCEPT_CONTENT=json
      - CELERY_TASK_SERIALIZER=json
      - CELERY_RESULT_SERIALIZER=json
      - CELERY_TIMEZONE=Asia/Kolkata

  stripe-cli:
    container_name: stripe_cli_container
    image: stripe/stripe-cli:latest
    entrypoint: /bin/sh
    command: -c "stripe listen --forward-to http://host.docker.internal:8000/api/payments/webhook/"
    volumes:
      - ./backend/payment_service:/app
    tty: true  # Keep the terminal open

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    environment:
      - discovery.type=single-node
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - es_data:/usr/share/elasticsearch/data

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command: --config.file /etc/prometheus/prometheus.yml

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus


volumes:
  user_db_data:
  article_db_data:
  community_db_data:
  team_db_data:
  communication_db_data:
  payment_db_data:
  user_redis_data:
  communication_redis_data:
  kafka_data:
  zookeeper_data:
  es_data:
  prometheus_data:
  grafana_data: