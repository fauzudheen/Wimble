# user-redis
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-redis
  namespace: wimble
spec:
  serviceName: "user-redis"
  replicas: 1
  selector:
    matchLabels:
      app: user-redis
  template:
    metadata:
      labels:
        app: user-redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: user-redis-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: user-redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ebs-sc
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: user-redis
  namespace: wimble
spec:
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None
  selector:
    app: user-redis
---

# communication-redis

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: communication-redis
  namespace: wimble
spec:
  serviceName: "communication-redis"
  replicas: 1
  selector:
    matchLabels:
      app: communication-redis
  template:
    metadata:
      labels:
        app: communication-redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: communication-redis-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: communication-redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ebs-sc
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: communication-redis
  namespace: wimble
spec:
  ports:
  - port: 6380
    targetPort: 6379
  clusterIP: None
  selector:
    app: communication-redis
---

# Zookeeper 

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: wimble
spec:
  serviceName: "zookeeper"
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: bitnami/zookeeper:latest
        ports:
        - containerPort: 2181
        env:
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        volumeMounts:
        - name: data
          mountPath: /bitnami/zookeeper
      securityContext:
        fsGroup: 1001  # Assuming 1001 is the group ID used by the zookeeper user inside the container
        runAsUser: 1001  # Also ensure the container is running as the correct user
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: ebs-sc
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: wimble
spec:
  ports:
  - port: 2181
    targetPort: 2181
  selector:
    app: zookeeper
  clusterIP: None

---

# Kafka 

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: wimble
spec:
  serviceName: "kafka"
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:latest
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-0.kafka.wimble.svc.cluster.local:9092"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
      securityContext:
        fsGroup: 1001  # Ensure the group has access to the volumes
        runAsUser: 1001  # Run Kafka as user 1001, which is used inside Bitnami Kafka containers
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: ebs-sc
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: wimble
spec:
  ports:
  - port: 9092
    targetPort: 9092
  selector:
    app: kafka
  clusterIP: None

---

# Prometheus 

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: wimble
spec:
  serviceName: "prometheus"
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus
        - name: data
          mountPath: /prometheus
      volumes:
      - name: prometheus-config-volume
        configMap:
          name: prometheus-config
      securityContext:
        fsGroup: 65534  # Prometheus usually runs as 'nobody' user inside containers, with group ID 65534
        runAsUser: 65534  # Ensure Prometheus runs as the 'nobody' user
        runAsNonRoot: true
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: ebs-sc
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: wimble
spec:
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus
  clusterIP: None

---

# Note: User-DB (PostgreSQL)
# Instead of deploying PostgreSQL in Kubernetes, create an Amazon RDS instance.
# Update your application's configuration to use the RDS endpoint.
# Remove the following Kubernetes resources for User-DB:
# - StatefulSet
# - Service
# - PersistentVolumeClaim
# You'll need to create the RDS instance in AWS and update your application's
# database connection string to point to the new RDS endpoint.



